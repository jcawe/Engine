@startuml

hide empty members

class Entity
interface IComponent
interface ISystem

Entity *-- IComponent
ISystem -right-> Entity : Uses >

class Context {
    +Entities
    +Systems
}

Context *-- Entity
Context *-- ISystem

interface IGame {
    +Run()
}

class Game {
    -Init()
    -Update()
    -Clean()
    -Render()
}

IGame <|-right- Game
Game *-- Context

interface IInitSystem {
    +Init()
}

interface IUpdateSystem {
    +Filter
    +Update()
}

interface ICleanSystem {
    +Clean()
}

interface IRenderSystem {
    +Filter
    +Render()
}

ISystem <|-- IInitSystem
ISystem <|-- IUpdateSystem
ISystem <|-- ICleanSystem
ISystem <|-- IRenderSystem
@enduml

@startuml

hide empty members

interface IRenderSystem
interface IUpdateSystem

class RenderSystem
class InputSystem

IRenderSystem <|-- RenderSystem
IUpdateSystem <|-- InputSystem

interface ITrigger {
    +InputTrigger
    +Action
}

class Trigger<T> {
    -Input
}

class Control {
    +InputDeviceType
    +Triggers
}

ITrigger <|-- Trigger

InputSystem -->  Control : Uses >
Control *-left- ITrigger

interface IInputControl {
    +InputDeviceType
    +CheckInput()
}

class KeyboardControl
class MouseControl

IInputControl <|-- KeyboardControl
IInputControl <|-- MouseControl

InputSystem *-- IInputControl

@enduml

@startuml

hide empty members

package OpenTk.Graphics {
    ' class GL <<(C,Orange)<b>static</b> >>
    class GameWindow
}

package Engine {
    interface IComponent
    class Game
    ' class RenderSystem

    class Sprite {
        +Image
    }

    class AnimatedSprite {
        +Sprites
        +Ticks
    }

    class Text {
        +Value
        +Font
    }
}

Text::Font *-- Sprite
AnimatedSprite::Sprites *-- Sprite

IComponent <|-- Sprite
IComponent <|-left- AnimatedSprite
IComponent <|-right- Text

GameWindow <|-- Game

@enduml